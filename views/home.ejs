<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" href="/styles.css">
</head>

<body style="padding: 0 50px">
  <h2>Fetch Events</h2>
  <div style="margin-bottom: 25px;">
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate">

    <label for="endDate">End Date:</label>
    <input type="date" id="endDate">

    <button style="margin-left: 15px;" id="fetchButton">Fetch Events</button>
  </div>
  <div class="search-filters">
    <label>
      SKU:
      <input type="text" id="skuFilter" placeholder="Filter by SKU">
    </label>
    <label>
      ID:
      <input type="text" id="idFilter" placeholder="Filter by ID">
    </label>
    <label>
      Model:
      <input type="text" id="modelFilter" placeholder="Filter by Model">
    </label>
    <label>
      Missing:
      <input type="text" id="missingFilter" placeholder="Filter by Model">
    </label>
    <label>
      Action:
      <input type="text" id="actionFilter" placeholder="Filter by Action">
    </label>
  </div>
  <span id="loader" style="display:none; margin-bottom: 15px;"></span>

  <button id="export-button" style="display: none;">Export CSV</button>
  <table style="width:100%; position: relative;" id="eventsTable">
    <thead>
      <tr>
        <th style="width: 15%; position: sticky; top: 0;">ID</th>
        <th style="width: 5%; position: sticky;top: 0;">SKU</th>
        <th style="width: 10%; position: sticky;top: 0;">Kitchen</th>
        <th style="width: 5%; position: sticky;top: 0;">Model</th>
        <th style="width: 5%; position: sticky;top: 0;">Missing</th>
        <th style="width: 10%; position: sticky;top: 0;">Confidence</th>
        <th style="width: 10%; position: sticky;top: 0;">Model Response</th>
        <th style="width: 5%; position: sticky; top: 0;">Action</th>
        <th style="width: 5%; position: sticky; top: 0;">Event Date</th>
        <th style="width: 20%; position: sticky;top: 0;">Order Image</th>
        <!-- Add other headers as needed -->
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>

  <script>
    const loc = window.location;
    let wsURL = (loc.protocol === 'https:') ? 'wss:' : 'ws:';
    wsURL += '//' + loc.host + '/ws';
    const ws = new WebSocket(wsURL);

    ws.onopen = () => {
      console.log('Connected to the WebSocket Server');
      // Request data when the user clicks a button or some other event
      document.getElementById("fetchButton").addEventListener("click", () => {
        loader.style.display = 'block';

        // Get the selected dates
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        if (!startDate || !endDate) {
          alert('Please select both start and end dates.');
          return;
        }

        // Convert to the desired format: YYYYMMDDTHH
        const formattedStartDate = `${startDate}T00`.replace(/-/g, '');
        const formattedEndDate = `${endDate}T23`.replace(/-/g, '');

        const message = {
          type: 'fetchData',
          content: {
            start: formattedStartDate,
            end: formattedEndDate
          }
        }

        ws.send(JSON.stringify(message));
      });
    };

    ws.onping = () => {
      ws.pong();  // Send a pong in response to the ping
    };

    ws.onmessage = (event) => {
      const parsedEvent = JSON.parse(event.data);
      if (parsedEvent.type === 'Events' && parsedEvent.content.length > 0) {
        const dataChunk = parsedEvent.content;
        // Update table with received data chunk
        updateTable(dataChunk);
        document.querySelector("#export-button").style.display = "block";
      }
    };

    function updateTable(dataChunk) {
      const tableBody = document.getElementById("eventsTable").getElementsByTagName("tbody")[0];

      dataChunk.forEach(event => {
        const newRow = tableBody.insertRow();

        // Assuming event has fields: id, sku, kitchen, model, confidence, and modelResponse
        const idCell = newRow.insertCell(0);
        const skuCell = newRow.insertCell(1);
        const kitchenCell = newRow.insertCell(2);
        const modelCell = newRow.insertCell(3);
        const missingCell = newRow.insertCell(4)
        const confidenceCell = newRow.insertCell(5);
        const modelResponseCell = newRow.insertCell(6);
        const actionCell = newRow.insertCell(7);
        const dateCell = newRow.insertCell(8);
        const imgCell = newRow.insertCell(9);

        const { event_properties, event_time } = event

        idCell.textContent = event_properties.universalId;
        idCell.classList.add('id-cell')
        skuCell.textContent = event_properties.sku;
        skuCell.classList.add('sku-cell')
        kitchenCell.textContent = event_properties.deviceKitchenId;
        modelCell.textContent = event_properties.model;
        modelCell.classList.add('model-cell')
        missingCell.textContent = event_properties.missing;
        missingCell.classList.add('missing-cell')
        confidenceCell.textContent = event_properties.confidence;

        modelResponseCell.textContent = `trained: ${event_properties.trained} \n
          qtModel: ${event_properties.quantityModel} \n
          qtReqModel: ${event_properties.quantityRequested} \n
          ${event_properties.formOption ? `formOption: ${event_properties.formOption}` : ''} 
          `;

        actionCell.textContent = event_properties.action
        actionCell.classList.add('action-cell')

        dateCell.textContent = event_time;

        const img = document.createElement('img');
        img.src = `https://images-kos.s3.amazonaws.com/photos_of_the_orders/prod/${event_properties.universalId.replace(/:/g, '_')}/${event_properties.universalId.replace(/:/g, '_')}.jpg`;  // assuming "event.imageURL" holds the URL to your image
        img.alt = 'Event Image';   // add an appropriate alt text
        img.style.width = '100%'; // optional: set a width (or any other style you want)
        imgCell.appendChild(img);
      });
    }

    function filterTable() {
      const skuValue = document.getElementById('skuFilter').value.toLowerCase();
      const idValue = document.getElementById('idFilter').value.toLowerCase();
      const modelValue = document.getElementById('modelFilter').value.toLowerCase();
      const actionValue = document.getElementById('actionFilter').value.toLowerCase();
      const missingValue = document.getElementById('missingFilter').value.toLowerCase();

      const rows = document.querySelectorAll('#eventsTable tbody tr');

      for (let row of rows) {
        const skuCell = row.querySelector('.sku-cell').textContent.toLowerCase();
        const idCell = row.querySelector('.id-cell').textContent.toLowerCase();
        const modelCell = row.querySelector('.model-cell').textContent.toLowerCase();
        const actionCell = row.querySelector('.action-cell').textContent.toLowerCase();
        const missingCell = row.querySelector('.missing-cell').textContent.toLowerCase();

        if (skuCell.includes(skuValue) && idCell.includes(idValue) && modelCell.includes(modelValue) && actionCell.includes(actionValue) && missingCell.includes(missingValue)) {
          row.style.display = "";
        } else {
          row.style.display = "none";
        }
      }
    }

    document.getElementById('skuFilter').addEventListener('input', filterTable);
    document.getElementById('idFilter').addEventListener('input', filterTable);
    document.getElementById('modelFilter').addEventListener('input', filterTable);
    document.getElementById('actionFilter').addEventListener('input', filterTable);
    document.getElementById('actionFilter').addEventListener('input', filterTable);
    document.getElementById('missingFilter').addEventListener('input', filterTable);
  </script>
  <script src="/js/exportCSV.js"></script>
</body>

</html>